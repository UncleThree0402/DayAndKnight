//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterControls"",
            ""id"": ""83e391cb-5ec2-4ad8-a2b5-b85632a47330"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b79930f1-d80f-45f6-8836-5b41e181936d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""91df44b2-ac36-45a8-a9e7-ab706923381b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""c9a35325-60f8-4c57-b363-fbb9fe186771"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d7a315ea-8d9f-4ff9-9d77-7bab617b9526"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Value"",
                    ""id"": ""6a26a853-919b-4b90-9777-9ca888b2eeba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CombatMode"",
                    ""type"": ""Button"",
                    ""id"": ""a3bf910c-58fa-4645-91d6-ed15e7b08289"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""fff4a4db-a9d3-4a37-94c6-3299062a9d90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""d26e2df3-341c-422b-9324-7912c9bae311"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Combo1"",
                    ""type"": ""Button"",
                    ""id"": ""ab569c5f-f974-454a-b5d9-799d262489b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Combo2"",
                    ""type"": ""Button"",
                    ""id"": ""01acb22d-cef1-44f1-abe3-6a3a96357b6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Combo3"",
                    ""type"": ""Button"",
                    ""id"": ""5152e378-38bd-4ac1-9d32-c6cd0709276f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Combo4"",
                    ""type"": ""Button"",
                    ""id"": ""79fdcf2c-6b53-411e-94bd-bf96cd60debd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2e2967a2-aea1-49b0-8d07-312850d8c316"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eeb99a1a-1455-43b5-a02d-c169b4f4fd65"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6f0d3299-9046-4d49-8259-92437dd183df"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9a859983-4722-4440-a95e-71d9323e1833"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ab96c843-4e1e-4541-8f90-f4a6daacbed7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""56292224-fc66-4816-9b02-14a4482384d4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d661d81-ed6b-4948-831e-33f0c1124153"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fccb246-4652-4e8f-95ec-9e83f4104305"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09516e85-e469-41d5-aa8f-157fbefd6de1"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9478561b-571e-4f28-838f-2c93fabdfcc7"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""912a10d4-79c3-456b-89da-a603c7e563dc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60f6b1bc-e743-443e-8d75-7ff18aff0477"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c2b4dc0-9522-4714-8c70-16395c2bf6ca"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combo1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e00add8a-4b50-4e7d-95cf-02942fa2979e"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combo2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46e09e5e-cbec-43ca-aa93-4370ac1e68ff"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combo3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5eeb492-89ab-4ab6-b216-908021838f8b"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combo4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIControls"",
            ""id"": ""8a79df1a-cf18-452e-b9ae-209a58f1341f"",
            ""actions"": [
                {
                    ""name"": ""Map"",
                    ""type"": ""Button"",
                    ""id"": ""c1169972-db84-44b9-8ee3-b45427f59286"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""7e74b26e-c2ea-4bcc-93c6-36f4b0633105"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5dca9424-0583-414c-a652-103d5cb31e98"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0933f712-b83b-41fd-b02c-8b2f564b46cc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControls
        m_CharacterControls = asset.FindActionMap("CharacterControls", throwIfNotFound: true);
        m_CharacterControls_Move = m_CharacterControls.FindAction("Move", throwIfNotFound: true);
        m_CharacterControls_Run = m_CharacterControls.FindAction("Run", throwIfNotFound: true);
        m_CharacterControls_Roll = m_CharacterControls.FindAction("Roll", throwIfNotFound: true);
        m_CharacterControls_Jump = m_CharacterControls.FindAction("Jump", throwIfNotFound: true);
        m_CharacterControls_Crouch = m_CharacterControls.FindAction("Crouch", throwIfNotFound: true);
        m_CharacterControls_CombatMode = m_CharacterControls.FindAction("CombatMode", throwIfNotFound: true);
        m_CharacterControls_Attack = m_CharacterControls.FindAction("Attack", throwIfNotFound: true);
        m_CharacterControls_Block = m_CharacterControls.FindAction("Block", throwIfNotFound: true);
        m_CharacterControls_Combo1 = m_CharacterControls.FindAction("Combo1", throwIfNotFound: true);
        m_CharacterControls_Combo2 = m_CharacterControls.FindAction("Combo2", throwIfNotFound: true);
        m_CharacterControls_Combo3 = m_CharacterControls.FindAction("Combo3", throwIfNotFound: true);
        m_CharacterControls_Combo4 = m_CharacterControls.FindAction("Combo4", throwIfNotFound: true);
        // UIControls
        m_UIControls = asset.FindActionMap("UIControls", throwIfNotFound: true);
        m_UIControls_Map = m_UIControls.FindAction("Map", throwIfNotFound: true);
        m_UIControls_Menu = m_UIControls.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControls
    private readonly InputActionMap m_CharacterControls;
    private ICharacterControlsActions m_CharacterControlsActionsCallbackInterface;
    private readonly InputAction m_CharacterControls_Move;
    private readonly InputAction m_CharacterControls_Run;
    private readonly InputAction m_CharacterControls_Roll;
    private readonly InputAction m_CharacterControls_Jump;
    private readonly InputAction m_CharacterControls_Crouch;
    private readonly InputAction m_CharacterControls_CombatMode;
    private readonly InputAction m_CharacterControls_Attack;
    private readonly InputAction m_CharacterControls_Block;
    private readonly InputAction m_CharacterControls_Combo1;
    private readonly InputAction m_CharacterControls_Combo2;
    private readonly InputAction m_CharacterControls_Combo3;
    private readonly InputAction m_CharacterControls_Combo4;
    public struct CharacterControlsActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterControls_Move;
        public InputAction @Run => m_Wrapper.m_CharacterControls_Run;
        public InputAction @Roll => m_Wrapper.m_CharacterControls_Roll;
        public InputAction @Jump => m_Wrapper.m_CharacterControls_Jump;
        public InputAction @Crouch => m_Wrapper.m_CharacterControls_Crouch;
        public InputAction @CombatMode => m_Wrapper.m_CharacterControls_CombatMode;
        public InputAction @Attack => m_Wrapper.m_CharacterControls_Attack;
        public InputAction @Block => m_Wrapper.m_CharacterControls_Block;
        public InputAction @Combo1 => m_Wrapper.m_CharacterControls_Combo1;
        public InputAction @Combo2 => m_Wrapper.m_CharacterControls_Combo2;
        public InputAction @Combo3 => m_Wrapper.m_CharacterControls_Combo3;
        public InputAction @Combo4 => m_Wrapper.m_CharacterControls_Combo4;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterControlsActions instance)
        {
            if (m_Wrapper.m_CharacterControlsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMove;
                @Run.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRun;
                @Roll.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnRoll;
                @Jump.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCrouch;
                @CombatMode.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombatMode;
                @CombatMode.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombatMode;
                @CombatMode.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombatMode;
                @Attack.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnAttack;
                @Block.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnBlock;
                @Combo1.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo1;
                @Combo1.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo1;
                @Combo1.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo1;
                @Combo2.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo2;
                @Combo2.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo2;
                @Combo2.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo2;
                @Combo3.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo3;
                @Combo3.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo3;
                @Combo3.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo3;
                @Combo4.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo4;
                @Combo4.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo4;
                @Combo4.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnCombo4;
            }
            m_Wrapper.m_CharacterControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @CombatMode.started += instance.OnCombatMode;
                @CombatMode.performed += instance.OnCombatMode;
                @CombatMode.canceled += instance.OnCombatMode;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
                @Combo1.started += instance.OnCombo1;
                @Combo1.performed += instance.OnCombo1;
                @Combo1.canceled += instance.OnCombo1;
                @Combo2.started += instance.OnCombo2;
                @Combo2.performed += instance.OnCombo2;
                @Combo2.canceled += instance.OnCombo2;
                @Combo3.started += instance.OnCombo3;
                @Combo3.performed += instance.OnCombo3;
                @Combo3.canceled += instance.OnCombo3;
                @Combo4.started += instance.OnCombo4;
                @Combo4.performed += instance.OnCombo4;
                @Combo4.canceled += instance.OnCombo4;
            }
        }
    }
    public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);

    // UIControls
    private readonly InputActionMap m_UIControls;
    private IUIControlsActions m_UIControlsActionsCallbackInterface;
    private readonly InputAction m_UIControls_Map;
    private readonly InputAction m_UIControls_Menu;
    public struct UIControlsActions
    {
        private @PlayerInput m_Wrapper;
        public UIControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Map => m_Wrapper.m_UIControls_Map;
        public InputAction @Menu => m_Wrapper.m_UIControls_Menu;
        public InputActionMap Get() { return m_Wrapper.m_UIControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControlsActions set) { return set.Get(); }
        public void SetCallbacks(IUIControlsActions instance)
        {
            if (m_Wrapper.m_UIControlsActionsCallbackInterface != null)
            {
                @Map.started -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnMap;
                @Map.performed -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnMap;
                @Map.canceled -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnMap;
                @Menu.started -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_UIControlsActionsCallbackInterface.OnMenu;
            }
            m_Wrapper.m_UIControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Map.started += instance.OnMap;
                @Map.performed += instance.OnMap;
                @Map.canceled += instance.OnMap;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }
        }
    }
    public UIControlsActions @UIControls => new UIControlsActions(this);
    public interface ICharacterControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnCombatMode(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
        void OnCombo1(InputAction.CallbackContext context);
        void OnCombo2(InputAction.CallbackContext context);
        void OnCombo3(InputAction.CallbackContext context);
        void OnCombo4(InputAction.CallbackContext context);
    }
    public interface IUIControlsActions
    {
        void OnMap(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
